webpackJsonp([38],{474:function(n,s){n.exports={content:["article",["h2","\u683c\u5f0f\u5316\u91d1\u989d"],["pre",{lang:null,highlighted:'export function <span class="token function">formatMoney</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> {\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span><span class="token operator">=</span> <span class="token keyword">null</span> || s <span class="token operator">==</span><span class="token operator">=</span> undefined || s <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">\'null\'</span><span class="token punctuation">)</span> {\n\t\treturn <span class="token string">\'\'</span><span class="token comment" spellcheck="true">;</span>\n\t}\n\tvar n <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n\ts <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\\d\\<span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">/</span>g<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token comment" spellcheck="true">;</span>\n\tvar l <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\tvar t <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token comment" spellcheck="true">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i &lt; l.length; i++) {</span>\n\t\tt <span class="token operator">+=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> % <span class="token number">3</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> !<span class="token operator">==</span> l<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token string">\',\'</span> <span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t}\n\treturn t<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'.\'</span> <span class="token operator">+</span> r<span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","export function formatMoney(s) {\n\tif (s === null || s === undefined || s === 'null') {\n\t\treturn '';\n\t}\n\tvar n = 2;\n\ts = parseFloat((s + '').replace(/[^\\d\\.-]/g, '')).toFixed(n) + '';\n\tvar l = s.split('.')[0].split('').reverse(),\n\t\tr = s.split('.')[1];\n\tvar t = '';\n\tfor (var i = 0; i < l.length; i++) {\n\t\tt += l[i] + ((i + 1) % 3 === 0 && (i + 1) !== l.length ? ',' : '');\n\t}\n\treturn t.split('').reverse().join('') + '.' + r;\n};"]],["h2","\u91d1\u989d\u5355\u4f4d\u5206\u8f6c\u6362\u4e3a\u5143"],["pre",{lang:null,highlighted:'export function <span class="token function">transformMoney</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count<span class="token punctuation">)</span> {\n\n\tlet money <span class="token operator">=</span> <span class="token number">0.00</span><span class="token punctuation">,</span>\n\t\tinteger <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\tdigits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>\\d<span class="token operator">+</span>$<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">?</span> count <span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> {\n\t\tmoney <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token comment" spellcheck="true">; //\u5206\u5230\u5143\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">)</span> {\n\t\t\tinteger <span class="token operator">=</span> money<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> {\n\t\t\t\tmoney <span class="token operator">=</span> money<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'.00\'</span><span class="token comment" spellcheck="true">;</span>\n\t\t\t\treturn money<span class="token comment" spellcheck="true">;</span>\n\t\t\t}\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> {\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> {\n\t\t\t\t\tmoney <span class="token operator">=</span> money<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'0\'</span><span class="token comment" spellcheck="true">;</span>\n\t\t\t\t}\n\t\t\t\treturn money<span class="token comment" spellcheck="true">;</span>\n\t\t\t}\n\t\t} <span class="token keyword">else</span> {\n\t\t\treturn money<span class="token comment" spellcheck="true">;</span>\n\t\t}\n\t} <span class="token keyword">else</span> {\n\t\treturn <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t}\n}'},["code","export function transformMoney(num, count) {\n\n\tlet money = 0.00,\n\t\tinteger = [],\n\t\tdigits = (/^\\d+$/).test(count) ? count : 2;\n\tif (num) {\n\t\tmoney = (num * 0.01).toFixed(digits); //\u5206\u5230\u5143\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\n\t\tif (digits) {\n\t\t\tinteger = money.toString().split('.');\n\t\t\tif (integer.length === 1) {\n\t\t\t\tmoney = money.toString() + '.00';\n\t\t\t\treturn money;\n\t\t\t}\n\t\t\tif (integer.length > 1) {\n\t\t\t\tif (integer[1].length < 2) {\n\t\t\t\t\tmoney = money.toString() + '0';\n\t\t\t\t}\n\t\t\t\treturn money;\n\t\t\t}\n\t\t} else {\n\t\t\treturn money;\n\t\t}\n\t} else {\n\t\treturn (0).toFixed(digits);\n\t}\n}"]],["h2","\u8f6c\u5927\u5199\u91d1\u989d"],["pre",{lang:null,highlighted:'export function <span class="token function">digitUppercase</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> {\n\t<span class="token keyword">const</span> fraction <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'\u89d2\'</span><span class="token punctuation">,</span> <span class="token string">\'\u5206\'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\t<span class="token keyword">const</span> digit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'\u96f6\'</span><span class="token punctuation">,</span> <span class="token string">\'\u58f9\'</span><span class="token punctuation">,</span> <span class="token string">\'\u8d30\'</span><span class="token punctuation">,</span> <span class="token string">\'\u53c1\'</span><span class="token punctuation">,</span> <span class="token string">\'\u8086\'</span><span class="token punctuation">,</span> <span class="token string">\'\u4f0d\'</span><span class="token punctuation">,</span> <span class="token string">\'\u9646\'</span><span class="token punctuation">,</span> <span class="token string">\'\u67d2\'</span><span class="token punctuation">,</span> <span class="token string">\'\u634c\'</span><span class="token punctuation">,</span> <span class="token string">\'\u7396\'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\t<span class="token keyword">const</span> unit <span class="token operator">=</span> <span class="token punctuation">[</span>\n\t\t<span class="token punctuation">[</span><span class="token string">\'\u5143\'</span><span class="token punctuation">,</span> <span class="token string">\'\u4e07\'</span><span class="token punctuation">,</span> <span class="token string">\'\u4ebf\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">[</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'\u62fe\'</span><span class="token punctuation">,</span> <span class="token string">\'\u4f70\'</span><span class="token punctuation">,</span> <span class="token string">\'\u4edf\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\tlet num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\tlet s <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token comment" spellcheck="true">;</span>\n\tfraction<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n\t\ts <span class="token operator">+=</span> <span class="token punctuation">(</span>digit<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span><span class="token operator">*</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> % <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>\u96f6<span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t}<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\ts <span class="token operator">=</span> s || <span class="token string">\'\u6574\'</span><span class="token comment" spellcheck="true">;</span>\n\tnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; i &lt; unit[0].length &amp;&amp; num > 0; i += 1) {</span>\n\t\tlet p <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token comment" spellcheck="true">;</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>let j <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; j &lt; unit[1].length &amp;&amp; num > 0; j += 1) {</span>\n\t\t\tp <span class="token operator">=</span> digit<span class="token punctuation">[</span>num % <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> unit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token comment" spellcheck="true">;</span>\n\t\t\tnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\t\t}\n\t\ts <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>\u96f6<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">*</span>\u96f6$<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>$<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token string">\'\u96f6\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> unit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token comment" spellcheck="true">;</span>\n\t}\n\n\treturn s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>\u96f6<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">*</span>\u96f6\u5143<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token string">\'\u5143\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>\u96f6<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">/</span>g<span class="token punctuation">,</span> <span class="token string">\'\u96f6\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>\u6574$<span class="token operator">/</span><span class="token punctuation">,</span> <span class="token string">\'\u96f6\u5143\u6574\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}'},["code","export function digitUppercase(n) {\n\tconst fraction = ['\u89d2', '\u5206'];\n\tconst digit = ['\u96f6', '\u58f9', '\u8d30', '\u53c1', '\u8086', '\u4f0d', '\u9646', '\u67d2', '\u634c', '\u7396'];\n\tconst unit = [\n\t\t['\u5143', '\u4e07', '\u4ebf'],\n\t\t['', '\u62fe', '\u4f70', '\u4edf'],\n\t];\n\tlet num = Math.abs(n);\n\tlet s = '';\n\tfraction.forEach((item, index) => {\n\t\ts += (digit[Math.floor(num * 10 * (10 ** index)) % 10] + item).replace(/\u96f6./, '');\n\t});\n\ts = s || '\u6574';\n\tnum = Math.floor(num);\n\tfor (let i = 0; i < unit[0].length && num > 0; i += 1) {\n\t\tlet p = '';\n\t\tfor (let j = 0; j < unit[1].length && num > 0; j += 1) {\n\t\t\tp = digit[num % 10] + unit[1][j] + p;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\t\ts = p.replace(/(\u96f6.)*\u96f6$/, '').replace(/^$/, '\u96f6') + unit[0][i] + s;\n\t}\n\n\treturn s.replace(/(\u96f6.)*\u96f6\u5143/, '\u5143').replace(/(\u96f6.)+/g, '\u96f6').replace(/^\u6574$/, '\u96f6\u5143\u6574');\n}"]]],meta:{title:"\u91d1\u989d\u5904\u7406\u51fd\u6570\u5c01\u88c5",publishDate:"2019-07-11T00:00:00.000Z",abstract:"\u91d1\u989d\u5904\u7406\u51fd\u6570\u5c01\u88c5",filename:"posts/\u6280\u672f\u5206\u7c7b/javascript/\u91d1\u989d\u5904\u7406\u51fd\u6570\u5c01\u88c5.md"}}}});