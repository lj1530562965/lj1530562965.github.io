webpackJsonp([8],{519:function(n,s){n.exports={content:["article",["h2","\u4f7f\u7528SockJS\u5b9e\u73b0webSocket\u901a\u4fe1"],["p","1\u3001\u7b80\u5355\u4ecb\u7ecd\n\u57fa\u4e8ewebSocket\u901a\u4fe1\u7684\u5e93\u4e3b\u8981\u6709 socket.io\uff0cSockJS\uff0c\u8fd9\u6b21\u7528\u7684\u662f SockJS\u3002\n2\u3001\u524d\u63d0\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528sockjs-client\u3001stomjs\u8fd9\u4e24\u4e2a\u6a21\u5757\uff0c\u8981\u5b9e\u73b0webSocket\u901a\u4fe1\uff0c\u9700\u8981\u540e\u53f0\u914d\u5408\uff0c\u4e5f\u4f7f\u7528\u76f8\u5e94\u7684\u6a21\u5757\u3002\nsockjs-client\nsockjs-client\u662f\u4eceSockJS\u4e2d\u5206\u79bb\u51fa\u6765\u7684\u7528\u4e8e\u5ba2\u6237\u7aef\u4f7f\u7528\u7684\u901a\u4fe1\u6a21\u5757.\u6240\u4ee5\u6211\u4eec\u5c31\u76f4\u63a5\u6765\u770b\u770bSockJS. SockJS\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668\u7684JavaScript\u5e93,\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u7f51\u7edc\u7684\u5bf9\u8c61,SockJS\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8fde\u8d2f\u7684,\u8de8\u6d4f\u89c8\u5668\u7684JavaScriptAPI,\u5b83\u5728\u6d4f\u89c8\u5668\u548cWeb\u670d\u52a1\u5668\u4e4b\u95f4\u521b\u5efa\u4e86\u4e00\u4e2a\u4f4e\u5ef6\u8fdf,\u5168\u53cc\u5de5,\u8de8\u57df\u901a\u4fe1\u901a\u9053. \u4f60\u53ef\u80fd\u4f1a\u95ee,\u6211\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528\u539f\u751f\u7684WebSocket\u800c\u8981\u4f7f\u7528SockJS\u5462?\u8fd9\u5f97\u76ca\u4e8eSockJS\u7684\u4e00\u5927\u7279\u6027,\u4e00\u4e9b\u6d4f\u89c8\u5668\u4e2d\u7f3a\u5c11\u5bf9WebSocket\u7684\u652f\u6301,\u56e0\u6b64\uff0c\u56de\u9000\u9009\u9879\u662f\u5fc5\u8981\u7684\uff0c\u800cSpring\u6846\u67b6\u63d0\u4f9b\u4e86\u57fa\u4e8eSockJS\u534f\u8bae\u7684\u900f\u660e\u7684\u56de\u9000\u9009\u9879\u3002SockJS\u63d0\u4f9b\u4e86\u6d4f\u89c8\u5668\u517c\u5bb9\u6027,\u4f18\u5148\u4f7f\u7528\u539f\u751f\u7684WebSocket,\u5982\u679c\u67d0\u4e2a\u6d4f\u89c8\u5668\u4e0d\u652f\u6301WebSocket,SockJS\u4f1a\u81ea\u52a8\u964d\u7ea7\u4e3a\u8f6e\u8be2.\nstomjs\nSTOMP(Simple Text-Orientated Messaging Protocol) \u9762\u5411\u6d88\u606f\u7684\u7b80\u5355\u6587\u672c\u534f\u8bae;\nWebSocket\u662f\u4e00\u4e2a\u6d88\u606f\u67b6\u6784,\u4e0d\u5f3a\u5236\u4f7f\u7528\u4efb\u4f55\u7279\u5b9a\u7684\u6d88\u606f\u534f\u8bae,\u5b83\u4f9d\u8d56\u4e8e\u5e94\u7528\u5c42\u89e3\u91ca\u6d88\u606f\u7684\u542b\u4e49.\n\u4e0eHTTP\u4e0d\u540c,WebSocket\u662f\u5904\u5728TCP\u4e0a\u975e\u5e38\u8584\u7684\u4e00\u5c42,\u4f1a\u5c06\u5b57\u8282\u6d41\u8f6c\u5316\u4e3a\u6587\u672c/\u4e8c\u8fdb\u5236\u6d88\u606f,\u56e0\u6b64,\u5bf9\u4e8e\u5b9e\u9645\u5e94\u7528\u6765\u8bf4,WebSocket\u7684\u901a\u4fe1\u5f62\u5f0f\u5c42\u7ea7\u8fc7\u4f4e,\u56e0\u6b64\uff0c\u53ef\u4ee5\u5728 WebSocket \u4e4b\u4e0a\u4f7f\u7528STOMP\u534f\u8bae\uff0c\u6765\u4e3a\u6d4f\u89c8\u5668 \u548c server\u95f4\u7684 \u901a\u4fe1\u589e\u52a0\u9002\u5f53\u7684\u6d88\u606f\u8bed\u4e49\u3002\nSTOMP\u4e0eWebSocket \u7684\u5173\u7cfb:"],["p","HTTP\u534f\u8bae\u89e3\u51b3\u4e86web\u6d4f\u89c8\u5668\u53d1\u8d77\u8bf7\u6c42\u4ee5\u53caweb\u670d\u52a1\u5668\u54cd\u5e94\u8bf7\u6c42\u7684\u7ec6\u8282,\u5047\u8bbeHTTP\u534f\u8bae\u4e0d\u5b58\u5728,\u53ea\u80fd\u4f7f\u7528TCP\u5957\u63a5\u5b57\u6765\u7f16\u5199web\u5e94\u7528,\u4f60\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4ef6\u75af\u72c2\u7684\u4e8b\u60c5;\n\u76f4\u63a5\u4f7f\u7528WebSocket(SockJS)\u5c31\u5f88\u7c7b\u4f3c\u4e8e\u4f7f\u7528TCP\u5957\u63a5\u5b57\u6765\u7f16\u5199web\u5e94\u7528,\u56e0\u4e3a\u6ca1\u6709\u9ad8\u5c42\u534f\u8bae,\u5c31\u9700\u8981\u6211\u4eec\u5b9a\u4e49\u5e94\u7528\u95f4\u53d1\u9001\u6d88\u606f\u7684\u8bed\u4e49,\u8fd8\u9700\u8981\u786e\u4fdd\u8fde\u63a5\u7684\u4e24\u7aef\u90fd\u80fd\u9075\u5faa\u8fd9\u4e9b\u8bed\u4e49;\n\u540cHTTP\u5728TCP\u5957\u63a5\u5b57\u4e0a\u6dfb\u52a0\u8bf7\u6c42-\u54cd\u5e94\u6a21\u578b\u5c42\u4e00\u6837,STOMP\u5728WebSocket\u4e4b\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e\u5e27\u7684\u7ebf\u8def\u683c\u5f0f\u5c42,\u7528\u6765\u5b9a\u4e49\u6d88\u606f\u8bed\u4e49."],["p","3\u3001\u4ee3\u7801\n\u5148\u5b89\u88c5 sockjs-client \u548c stompjs"],["pre",{lang:null,highlighted:'npm install sockjs<span class="token operator">-</span>client\nnpm install stompjs'},["code","npm install sockjs-client\nnpm install stompjs"]],["pre",{lang:null,highlighted:'import SockJS from <span class="token string">"sockjs-client"</span><span class="token comment" spellcheck="true">;</span>\nimport Stomp from <span class="token string">"stompjs"</span><span class="token comment" spellcheck="true">;</span>\n<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n <span class="token operator">*</span> options{\n <span class="token operator">*</span>   url<span class="token punctuation">:</span><span class="token string">\'socketUrl\'</span>\n <span class="token operator">*</span>   headers<span class="token punctuation">:</span>\u53d1\u9001\u53c2\u6570\n <span class="token operator">*</span>   receives \uff1a\u63a5\u6536\u961f\u5217\n <span class="token operator">*</span>   send<span class="token punctuation">:</span><span class="token string">\'\u91cd\u53d1\u961f\u5217\'</span>\n <span class="token operator">*</span>   send_params<span class="token punctuation">:</span><span class="token string">\'\u91cd\u53d1\u961f\u5217\u53c2\u6570\'</span>\n <span class="token operator">*</span>   timeout<span class="token punctuation">:</span><span class="token string">\'\u201c\u8d85\u65f6\u65f6\u95f4\u79d2\u201d\'</span>\n <span class="token operator">*</span>   reConnectNum<span class="token punctuation">:</span><span class="token string">\'\u91cd\u8fde\u6b21\u6570\'</span>\n <span class="token operator">*</span>   resendNum<span class="token punctuation">:</span><span class="token string">\'\u91cd\u53d1\u6b21\u6570\'</span>\n <span class="token operator">*</span> \n <span class="token operator">*</span> }\n <span class="token operator">*</span><span class="token operator">/</span>\nclass StompWebSocket {\n    <span class="token operator">/</span><span class="token operator">*</span> websocket\u5b9e\u4f8b <span class="token operator">*</span><span class="token operator">/</span>\n    _socket <span class="token operator">=</span> <span class="token keyword">null</span>\n    _stompClient <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token operator">/</span><span class="token operator">*</span><span class="token string">\'#\'</span>\u4e3a\u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u53ef\u8c03\u7528 <span class="token operator">*</span><span class="token operator">/</span>\n    _timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">/</span><span class="token operator">/</span>\u8ba1\u65f6\u5668\n    <span class="token operator">/</span><span class="token operator">/</span>\u53c2\u6570\n    _options <span class="token operator">=</span> {\n      url<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>\n      headers<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>\n      receives<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>\n      send<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>\n      send_params<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>\n      timeout<span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">,</span>\n      reConnectNum<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>\n      resendNum<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>\n    }\n    _msg <span class="token operator">=</span> {\n      <span class="token string">"200"</span><span class="token punctuation">:</span><span class="token string">"\u8fde\u63a5\u6210\u529f"</span><span class="token punctuation">,</span>\n      <span class="token string">"001"</span><span class="token punctuation">:</span><span class="token string">"\u91cd\u53d1\u6b21\u6570\u8d85\u51fa"</span><span class="token punctuation">,</span>\n      <span class="token string">"002"</span><span class="token punctuation">:</span><span class="token string">"\u91cd\u8fde\u6b21\u6570\u8d85\u51fa"</span>\n    }\n    _reConnectNum <span class="token operator">=</span> <span class="token number">0</span>\n    _resendNum <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>{\n      this<span class="token punctuation">.</span>_options <span class="token operator">=</span> {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>this<span class="token punctuation">.</span>_options<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options}<span class="token comment" spellcheck="true">;</span>\n      <span class="token keyword">const</span> {reConnectNum<span class="token punctuation">,</span>resendNum<span class="token punctuation">,</span>url}<span class="token operator">=</span> this<span class="token punctuation">.</span>_options<span class="token comment" spellcheck="true">;</span>\n      this<span class="token punctuation">.</span>_reConnectNum <span class="token operator">=</span> reConnectNum<span class="token comment" spellcheck="true">;</span>\n      this<span class="token punctuation">.</span>_resendNum <span class="token operator">=</span> resendNum<span class="token comment" spellcheck="true">;</span>\n      <span class="token function">if</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>{\n        this<span class="token punctuation">.</span>_socket <span class="token operator">=</span> new <span class="token function">SockJS</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      }\n    }\n    <span class="token function">_clearTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n     <span class="token function">clearTimeout</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>_timer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n    <span class="token function">_resend</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>{\n      <span class="token keyword">const</span> that<span class="token operator">=</span>this<span class="token comment" spellcheck="true">;</span>\n      this<span class="token punctuation">.</span><span class="token function">_clearTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      <span class="token keyword">const</span> {send<span class="token punctuation">,</span>send_params<span class="token punctuation">,</span>timeout}<span class="token operator">=</span>this<span class="token punctuation">.</span>_options<span class="token comment" spellcheck="true">;</span>\n      <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">.</span>_resendNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> {\n      <span class="token operator">/</span><span class="token operator">/</span>   this<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      <span class="token operator">/</span><span class="token operator">/</span>   return <span class="token function">reject</span><span class="token punctuation">(</span>{code<span class="token punctuation">:</span><span class="token string">"001"</span><span class="token punctuation">,</span>msg<span class="token punctuation">:</span>this<span class="token punctuation">.</span>_msg<span class="token punctuation">[</span><span class="token string">\'001\'</span><span class="token punctuation">]</span>}<span class="token punctuation">)</span>\n      <span class="token operator">/</span><span class="token operator">/</span> }<span class="token keyword">else</span>{\n      <span class="token operator">/</span><span class="token operator">/</span>   this<span class="token punctuation">.</span>_resendNum<span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">;</span>\n      <span class="token operator">/</span><span class="token operator">/</span> }\n      that<span class="token punctuation">.</span>_timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n        try {\n          this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>send<span class="token punctuation">,</span> {}<span class="token punctuation">,</span>send_params || <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n          that<span class="token punctuation">.</span><span class="token function">_resend</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>\n        } catch <span class="token punctuation">(</span>err<span class="token punctuation">)</span> {\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u65ad\u7ebf\u4e86: "</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n          that<span class="token punctuation">.</span><span class="token function">_reconnect</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">,</span>err<span class="token punctuation">)</span>\n        }\n      }<span class="token punctuation">,</span><span class="token punctuation">(</span>timeout<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    }\n    <span class="token function">_reconnect</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">,</span>error<span class="token punctuation">)</span>{\n      <span class="token function">if</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>_reConnectNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>{\n        <span class="token function">reject</span><span class="token punctuation">(</span>{data<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>code<span class="token punctuation">:</span><span class="token string">"002"</span><span class="token punctuation">,</span>msg<span class="token punctuation">:</span>this<span class="token punctuation">.</span>_msg<span class="token punctuation">[</span><span class="token string">\'002\'</span><span class="token punctuation">]</span>}<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      }<span class="token keyword">else</span>{\n        this<span class="token punctuation">.</span>_reConnectNum<span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span>_stompClient<span class="token operator">=</span><span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span><span class="token function">_connect</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>\n      }\n    }\n    <span class="token function">_connect</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>{\n      <span class="token keyword">const</span> that<span class="token operator">=</span>this<span class="token comment" spellcheck="true">;</span>\n      <span class="token keyword">const</span> {receives<span class="token punctuation">,</span>send<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>url}<span class="token operator">=</span>this<span class="token punctuation">.</span>_options<span class="token comment" spellcheck="true">;</span>\n      this<span class="token punctuation">.</span>_stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>_socket<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>headers || {}<span class="token punctuation">,</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u8fde\u63a5\u6210\u529f"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>send<span class="token punctuation">)</span>{\n          that<span class="token punctuation">.</span><span class="token function">_resend</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n         }\n        <span class="token operator">/</span><span class="token operator">/</span> \u8ba2\u9605\u524d\u5148\u53d6\u6d88\u8ba2\u9605\uff0c\u9632\u6b62\u591a\u6b21\u8ba2\u9605\u6d88\u606f\n        this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>receives<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>{\n            <span class="token operator">/</span><span class="token operator">/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>\n        }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>receives<span class="token punctuation">,</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n            <span class="token operator">/</span><span class="token operator">/</span>\u63a5\u6536\u5230\u670d\u52a1\u7aef\u4fe1\u606f\u7684\u56de\u8c03\u51fd\u6570\n            <span class="token function">resolve</span><span class="token punctuation">(</span>{data<span class="token punctuation">:</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>code<span class="token punctuation">:</span><span class="token string">"200"</span>}<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      }<span class="token punctuation">,</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u65ad\u7ebf\u4e86: "</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        that<span class="token punctuation">.</span><span class="token function">_reconnect</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">,</span>error<span class="token punctuation">)</span>\n      }\n      <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">)</span> {\n        this<span class="token punctuation">.</span>_stompClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span><span class="token function">_clearTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span>_stompClient<span class="token operator">=</span><span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n        this<span class="token punctuation">.</span>_socket<span class="token operator">=</span><span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n      }\n    }\n   send<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n      <span class="token keyword">const</span> that<span class="token operator">=</span>this<span class="token comment" spellcheck="true">;</span>\n      that<span class="token punctuation">.</span>resendNum<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n      that<span class="token punctuation">.</span>reConnectNum<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">;</span>\n     return new <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> {\n      return that<span class="token punctuation">.</span><span class="token function">_connect</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>\n    }<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span> {\n      return reject<span class="token comment" spellcheck="true">;</span>\n    }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n  }\n\n  export <span class="token keyword">default</span> StompWebSocket'},["code",'import SockJS from "sockjs-client";\nimport Stomp from "stompjs";\n/**\n * options{\n *   url:\'socketUrl\'\n *   headers:\u53d1\u9001\u53c2\u6570\n *   receives \uff1a\u63a5\u6536\u961f\u5217\n *   send:\'\u91cd\u53d1\u961f\u5217\'\n *   send_params:\'\u91cd\u53d1\u961f\u5217\u53c2\u6570\'\n *   timeout:\'\u201c\u8d85\u65f6\u65f6\u95f4\u79d2\u201d\'\n *   reConnectNum:\'\u91cd\u8fde\u6b21\u6570\'\n *   resendNum:\'\u91cd\u53d1\u6b21\u6570\'\n * \n * }\n */\nclass StompWebSocket {\n    /* websocket\u5b9e\u4f8b */\n    _socket = null\n    _stompClient = null\n    /*\'#\'\u4e3a\u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u53ef\u8c03\u7528 */\n    _timer = null//\u8ba1\u65f6\u5668\n    //\u53c2\u6570\n    _options = {\n      url:"",\n      headers:null,\n      receives:"",\n      send:"",\n      send_params:"",\n      timeout:60,\n      reConnectNum:3,\n      resendNum:3,\n    }\n    _msg = {\n      "200":"\u8fde\u63a5\u6210\u529f",\n      "001":"\u91cd\u53d1\u6b21\u6570\u8d85\u51fa",\n      "002":"\u91cd\u8fde\u6b21\u6570\u8d85\u51fa"\n    }\n    _reConnectNum = 0\n    _resendNum = 0\n    constructor(options){\n      this._options = {...this._options,...options};\n      const {reConnectNum,resendNum,url}= this._options;\n      this._reConnectNum = reConnectNum;\n      this._resendNum = resendNum;\n      if(url){\n        this._socket = new SockJS(url);\n      }\n    }\n    _clearTimeout(){\n     clearTimeout(this._timer);\n    }\n    _resend(resolve,reject){\n      const that=this;\n      this._clearTimeout();\n      const {send,send_params,timeout}=this._options;\n      // if (this._resendNum <= 0) {\n      //   this.dispose();\n      //   return reject({code:"001",msg:this._msg[\'001\']})\n      // }else{\n      //   this._resendNum--;\n      // }\n      that._timer=setTimeout(()=>{\n        try {\n          this._stompClient.send(send, {},send_params || \'\');\n          that._resend(resolve,reject)\n        } catch (err) {\n          console.log("\u65ad\u7ebf\u4e86: " + err);\n          that._reconnect(resolve,reject,err)\n        }\n      },(timeout*1000))\n    }\n    _reconnect(resolve,reject,error){\n      if(this._reConnectNum <= 0){\n        reject({data:null,code:"002",msg:this._msg[\'002\']});\n      }else{\n        this._reConnectNum--;\n        this._stompClient.disconnect();\n        this._stompClient=null;\n        this._connect(resolve,reject)\n      }\n    }\n    _connect(resolve,reject){\n      const that=this;\n      const {receives,send,headers,url}=this._options;\n      this._stompClient = Stomp.over(this._socket);\n      this._stompClient.connect(headers || {},(frame)=>{\n        console.log("\u8fde\u63a5\u6210\u529f");\n         if (send){\n          that._resend(resolve,reject);\n         }\n        // \u8ba2\u9605\u524d\u5148\u53d6\u6d88\u8ba2\u9605\uff0c\u9632\u6b62\u591a\u6b21\u8ba2\u9605\u6d88\u606f\n        this._stompClient.unsubscribe(receives, function(response){\n            //console.log(response)\n        });\n        this._stompClient.subscribe(receives,(response)=>{\n            //\u63a5\u6536\u5230\u670d\u52a1\u7aef\u4fe1\u606f\u7684\u56de\u8c03\u51fd\u6570\n            resolve({data:JSON.parse(response.body),code:"200"});\n        });\n      },(error)=>{\n        console.log("\u65ad\u7ebf\u4e86: " + error);\n        that._reconnect(resolve,reject,error)\n      }\n      );\n    }\n    dispose(){\n      if (this._stompClient) {\n        this._stompClient.disconnect();\n        this._clearTimeout();\n        this._stompClient=null;\n        this._socket=null;\n      }\n    }\n   send=()=>{\n      const that=this;\n      that.resendNum=0;\n      that.reConnectNum=0;\n     return new Promise(function(resolve, reject) {\n      return that._connect(resolve,reject)\n    }).catch(function(reject) {\n      return reject;\n    });\n    }\n  }\n\n  export default StompWebSocket']],["p","4\u3001\u4f7f\u7528\n\u65b9\u5f0f1\uff1a"],["pre",{lang:null,highlighted:'class Test extends Component{\n  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> {\n    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    this<span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">;</span>\n  }\n  async <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n      this<span class="token punctuation">.</span>ws <span class="token operator">=</span> new <span class="token function">WebSocket</span><span class="token punctuation">(</span>{\n        <span class="token operator">/</span><span class="token operator">/</span>\u7f51\u5740\uff08\u7aef\u53e3\u662f\u6211\u4e0b\u9762\u7684\u670d\u52a1\u5668\u7684\u7aef\u53e3\uff09\n        url<span class="token punctuation">:</span><span class="token string">\'https://test.zqtcn.com.cn/pos/83/webSocketServer\'</span><span class="token punctuation">,</span>\n        headers<span class="token punctuation">:</span>{\n          orderNo<span class="token punctuation">:</span>orderNo\n        }<span class="token punctuation">,</span>\n        receives<span class="token punctuation">:</span><span class="token string">\'/user/queue/message\'</span><span class="token punctuation">,</span>\n        send<span class="token punctuation">:</span><span class="token string">\'/order/state/query\'</span><span class="token punctuation">,</span>\n        send_params<span class="token punctuation">:</span>orderNo\n      }<span class="token punctuation">)</span>\n      let res <span class="token operator">=</span> await this<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> {code<span class="token punctuation">,</span>data<span class="token punctuation">,</span>msg} <span class="token operator">=</span> res<span class="token comment" spellcheck="true">;</span>\n      <span class="token function">if</span><span class="token punctuation">(</span>code<span class="token operator">==</span><span class="token operator">=</span><span class="token string">\'200\'</span><span class="token punctuation">)</span>{\n        this<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>{\n          type<span class="token punctuation">:</span> `${modelName}<span class="token operator">/</span>getPayStatus`<span class="token punctuation">,</span>\n          payload<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">)</span>\n      }<span class="token keyword">else</span>{\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n      }\n    }\n  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n    <span class="token keyword">const</span> {errorMsg<span class="token punctuation">,</span>showSuccess} <span class="token operator">=</span> this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>cashier<span class="token comment" spellcheck="true">;</span>\n    <span class="token function">if</span><span class="token punctuation">(</span>!this<span class="token punctuation">.</span>ws<span class="token punctuation">)</span>{\n      return<span class="token comment" spellcheck="true">;</span>\n    }\n    <span class="token function">if</span><span class="token punctuation">(</span>errorMsg || showSuccess<span class="token punctuation">)</span>{\n      <span class="token operator">/</span><span class="token operator">/</span>\u8ba2\u5355\u8fc7\u671f\u5173\u95ed\u8fde\u63a5\u53ca\u6536\u6b3e\u6210\u529f\u65f6\u5173\u95ed\u8fde\u63a5\n      this<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      return<span class="token comment" spellcheck="true">;</span>\n    }\n  }\n  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n    this<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  }\n}'},["code","class Test extends Component{\n  constructor(props) {\n    super(props);\n    this.ws = null;\n  }\n  async componentDidMount(){\n      this.ws = new WebSocket({\n        //\u7f51\u5740\uff08\u7aef\u53e3\u662f\u6211\u4e0b\u9762\u7684\u670d\u52a1\u5668\u7684\u7aef\u53e3\uff09\n        url:'https://test.zqtcn.com.cn/pos/83/webSocketServer',\n        headers:{\n          orderNo:orderNo\n        },\n        receives:'/user/queue/message',\n        send:'/order/state/query',\n        send_params:orderNo\n      })\n      let res = await this.ws.send();\n      console.log(res)\n      const {code,data,msg} = res;\n      if(code==='200'){\n        this.props.dispatch({\n          type: `${modelName}/getPayStatus`,\n          payload: JSON.parse(data),\n        })\n      }else{\n        console.log(msg)\n      }\n    }\n  componentDidUpdate(){\n    const {errorMsg,showSuccess} = this.props.cashier;\n    if(!this.ws){\n      return;\n    }\n    if(errorMsg || showSuccess){\n      //\u8ba2\u5355\u8fc7\u671f\u5173\u95ed\u8fde\u63a5\u53ca\u6536\u6b3e\u6210\u529f\u65f6\u5173\u95ed\u8fde\u63a5\n      this.ws.dispose();\n      return;\n    }\n  }\n  componentWillUnmount(){\n    this.ws.dispose();\n  }\n}"]],["p","\u65b9\u5f0f2"],["pre",{lang:null,highlighted:'import modelExtend from <span class="token string">\'dva-model-extend\'</span><span class="token comment" spellcheck="true">;</span>\nimport baseModel from <span class="token string">\'../baseModel\'</span>\nimport {Toast} from <span class="token string">\'antd-mobile\'</span><span class="token comment" spellcheck="true">;</span>\nimport {accesstoken} from <span class="token string">"../../services/pay/pcOrderService"</span><span class="token comment" spellcheck="true">;</span>\nimport {routerRedux} from <span class="token string">\'dva/router\'</span><span class="token comment" spellcheck="true">;</span>\nimport store from <span class="token string">"../../index"</span><span class="token comment" spellcheck="true">;</span>\nimport WebSocket from <span class="token string">\'../../utils/websocket\'</span><span class="token comment" spellcheck="true">;</span>\n<span class="token keyword">const</span> pcOrderModel <span class="token operator">=</span> <span class="token function">modelExtend</span><span class="token punctuation">(</span>baseModel<span class="token punctuation">,</span> {\n  namespace<span class="token punctuation">:</span> <span class="token string">\'pcOrder\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> {\n    accesstoken<span class="token punctuation">:</span> {}<span class="token punctuation">,</span>\n    ws<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>\n  }<span class="token punctuation">,</span>\n  subscriptions<span class="token punctuation">:</span> {}<span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> {\n    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n     <span class="token operator">*</span> \u83b7\u53d6\u94f6\u884c\u5361\u5217\u8868\n     <span class="token operator">*</span> <span class="token variable">@param</span> params\n     <span class="token operator">*</span> <span class="token variable">@param</span> call\n     <span class="token operator">*</span> <span class="token variable">@param</span> put\n     <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span> <span class="token function">accesstoken</span><span class="token punctuation">(</span>{payload}<span class="token punctuation">,</span> {call<span class="token punctuation">,</span> put}<span class="token punctuation">)</span> {\n      \n      let {data<span class="token punctuation">,</span> respCode} <span class="token operator">=</span> yield <span class="token function">call</span><span class="token punctuation">(</span>accesstoken<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      yield <span class="token function">put</span><span class="token punctuation">(</span>{\n        type<span class="token punctuation">:</span> <span class="token string">\'resultInfo\'</span><span class="token punctuation">,</span>\n        payload<span class="token punctuation">:</span> {\n          accesstoken<span class="token punctuation">:</span> data\n        }\n      }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>respCode <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"00"</span><span class="token punctuation">)</span> {\n        <span class="token operator">/</span><span class="token operator">/</span> \u957f\u8fde\u63a5\n        yield <span class="token function">put</span><span class="token punctuation">(</span>{\n          type<span class="token punctuation">:</span> <span class="token string">\'qrcodeQuery\'</span><span class="token punctuation">,</span>\n          payload<span class="token punctuation">:</span> {\n            <span class="token operator">/</span><span class="token operator">/</span> qrcode<span class="token punctuation">:</span> data<span class="token punctuation">.</span>qrcode<span class="token punctuation">,</span>\n            socketId<span class="token punctuation">:</span>data<span class="token punctuation">.</span>socketId\n          }\n        }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      }<span class="token keyword">else</span>{\n        <span class="token operator">/</span><span class="token operator">/</span>\u8fc7\u671f\u6216\u8005 \u6709\u5f02\u5e38\u7684\u60c5\u51b5 \u6709\u957f\u8fde\u63a5\u65ad\u5f00\u957f\u8fde\u63a5\n        yield <span class="token function">put</span><span class="token punctuation">(</span>{\n          type<span class="token punctuation">:</span> <span class="token string">\'dispose\'</span><span class="token punctuation">,</span>\n        }<span class="token punctuation">)</span>\n      }\n    }<span class="token punctuation">,</span>\n    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n     <span class="token operator">*</span> \u957f\u8fde\u63a5\n     <span class="token operator">*</span> <span class="token variable">@param</span> payload\n     <span class="token operator">*</span> <span class="token variable">@param</span> call\n     <span class="token operator">*</span> <span class="token variable">@param</span> put\n     <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span> <span class="token function">qrcodeQuery</span><span class="token punctuation">(</span>{payload}<span class="token punctuation">,</span> {call<span class="token punctuation">,</span> put<span class="token punctuation">,</span><span class="token keyword">select</span>}<span class="token punctuation">)</span> {\n       try{\n        <span class="token keyword">const</span> {socketId} <span class="token operator">=</span> payload<span class="token comment" spellcheck="true">;</span>\n        let {dispatch} <span class="token operator">=</span> store<span class="token comment" spellcheck="true">;</span>\n        yield <span class="token function">put</span><span class="token punctuation">(</span>{\n           type<span class="token punctuation">:</span> <span class="token string">\'resultInfo\'</span><span class="token punctuation">,</span>\n           payload<span class="token punctuation">:</span> {\n             ws<span class="token punctuation">:</span> new <span class="token function">WebSocket</span><span class="token punctuation">(</span>{\n               <span class="token operator">/</span><span class="token operator">/</span>\u7f51\u5740\uff08\u7aef\u53e3\u662f\u6211\u4e0b\u9762\u7684\u670d\u52a1\u5668\u7684\u7aef\u53e3\uff09\n               url<span class="token punctuation">:</span><span class="token string">\'http://test.zqtcn.com.cn/websocket/qrcode\'</span><span class="token punctuation">,</span>\n               receives<span class="token punctuation">:</span>`<span class="token operator">/</span>order<span class="token operator">/</span>${socketId}<span class="token operator">/</span>result`<span class="token punctuation">,</span>\n               send<span class="token punctuation">:</span>`<span class="token operator">/</span>api<span class="token operator">/</span>openweb<span class="token operator">/</span>pc<span class="token operator">/</span>qrcode<span class="token operator">/</span>${socketId}`<span class="token punctuation">,</span>\n               reConnectNum<span class="token punctuation">:</span><span class="token number">5</span>\n             }<span class="token punctuation">)</span>\n           }\n         }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n         <span class="token keyword">const</span> {ws} <span class="token operator">=</span> yield <span class="token function">select</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">[</span><span class="token string">\'pcOrder\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n         let res <span class="token operator">=</span> yield <span class="token function">call</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span>send<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n         <span class="token keyword">const</span> {code<span class="token punctuation">,</span>data<span class="token punctuation">,</span>msg} <span class="token operator">=</span> res<span class="token comment" spellcheck="true">;</span>\n         <span class="token function">if</span><span class="token punctuation">(</span>code<span class="token operator">==</span><span class="token operator">=</span><span class="token string">\'200\'</span><span class="token punctuation">)</span>{\n          <span class="token keyword">const</span> {respCode<span class="token punctuation">,</span>respMsg} <span class="token operator">=</span> data<span class="token comment" spellcheck="true">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>respCode <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">\'00\'</span><span class="token punctuation">)</span> {\n            <span class="token function">dispatch</span><span class="token punctuation">(</span>routerRedux<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/pcpayresult\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n          }<span class="token keyword">else</span>{\n            yield <span class="token function">put</span><span class="token punctuation">(</span>{\n              type<span class="token punctuation">:</span> <span class="token string">\'dispose\'</span><span class="token punctuation">,</span>\n            }<span class="token punctuation">)</span>\n            Toast<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>respMsg<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n          }\n         }<span class="token keyword">else</span>{\n          <span class="token function">dispatch</span><span class="token punctuation">(</span>routerRedux<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>{\n            pathname<span class="token punctuation">:</span> <span class="token string">\'/exception\'</span><span class="token punctuation">,</span>\n            search<span class="token punctuation">:</span> `code<span class="token operator">=</span><span class="token number">404</span><span class="token operator">&amp;</span>msg<span class="token operator">=</span>${msg}\uff0c\u8bf7\u91cd\u65b0\u4e0b\u5355\uff01`\n          }<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n         }\n       }<span class="token function">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>{\n       }\n    }<span class="token punctuation">,</span>\n    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>\n     <span class="token operator">*</span> \u65ad\u5f00\u957f\u8fde\u63a5\n     <span class="token operator">*</span> <span class="token variable">@param</span> payload\n     <span class="token operator">*</span> <span class="token variable">@param</span> call\n     <span class="token operator">*</span> <span class="token variable">@param</span> put\n     <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span> <span class="token function">dispose</span><span class="token punctuation">(</span>{payload}<span class="token punctuation">,</span> {call<span class="token punctuation">,</span> put<span class="token punctuation">,</span><span class="token keyword">select</span>}<span class="token punctuation">)</span> {\n      <span class="token keyword">const</span> {ws} <span class="token operator">=</span> yield <span class="token function">select</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">[</span><span class="token string">\'pcOrder\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      <span class="token function">if</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>{\n        yield <span class="token function">call</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span>dispose<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n      }\n     }<span class="token punctuation">,</span>\n  }<span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> {}\n}<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\nexport <span class="token keyword">default</span> pcOrderModel\n\n<span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n  this<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>{\n    type<span class="token punctuation">:</span> <span class="token string">\'pcOrder/dispose\'</span>\n  }<span class="token punctuation">)</span>\n}'},["code","import modelExtend from 'dva-model-extend';\nimport baseModel from '../baseModel'\nimport {Toast} from 'antd-mobile';\nimport {accesstoken} from \"../../services/pay/pcOrderService\";\nimport {routerRedux} from 'dva/router';\nimport store from \"../../index\";\nimport WebSocket from '../../utils/websocket';\nconst pcOrderModel = modelExtend(baseModel, {\n  namespace: 'pcOrder',\n  state: {\n    accesstoken: {},\n    ws:null,\n  },\n  subscriptions: {},\n  effects: {\n    /**\n     * \u83b7\u53d6\u94f6\u884c\u5361\u5217\u8868\n     * @param params\n     * @param call\n     * @param put\n     */* accesstoken({payload}, {call, put}) {\n      \n      let {data, respCode} = yield call(accesstoken);\n      yield put({\n        type: 'resultInfo',\n        payload: {\n          accesstoken: data\n        }\n      });\n      if (respCode === \"00\") {\n        // \u957f\u8fde\u63a5\n        yield put({\n          type: 'qrcodeQuery',\n          payload: {\n            // qrcode: data.qrcode,\n            socketId:data.socketId\n          }\n        });\n      }else{\n        //\u8fc7\u671f\u6216\u8005 \u6709\u5f02\u5e38\u7684\u60c5\u51b5 \u6709\u957f\u8fde\u63a5\u65ad\u5f00\u957f\u8fde\u63a5\n        yield put({\n          type: 'dispose',\n        })\n      }\n    },\n    /**\n     * \u957f\u8fde\u63a5\n     * @param payload\n     * @param call\n     * @param put\n     */* qrcodeQuery({payload}, {call, put,select}) {\n       try{\n        const {socketId} = payload;\n        let {dispatch} = store;\n        yield put({\n           type: 'resultInfo',\n           payload: {\n             ws: new WebSocket({\n               //\u7f51\u5740\uff08\u7aef\u53e3\u662f\u6211\u4e0b\u9762\u7684\u670d\u52a1\u5668\u7684\u7aef\u53e3\uff09\n               url:'http://test.zqtcn.com.cn/websocket/qrcode',\n               receives:`/order/${socketId}/result`,\n               send:`/api/openweb/pc/qrcode/${socketId}`,\n               reConnectNum:5\n             })\n           }\n         });\n         const {ws} = yield select(state => state['pcOrder']);\n         let res = yield call(ws.send);\n         const {code,data,msg} = res;\n         if(code==='200'){\n          const {respCode,respMsg} = data;\n          if (respCode === '00') {\n            dispatch(routerRedux.push('/pcpayresult'));\n          }else{\n            yield put({\n              type: 'dispose',\n            })\n            Toast.info(respMsg, 5);\n          }\n         }else{\n          dispatch(routerRedux.push({\n            pathname: '/exception',\n            search: `code=404&msg=${msg}\uff0c\u8bf7\u91cd\u65b0\u4e0b\u5355\uff01`\n          }));\n         }\n       }catch(e){\n       }\n    },\n    /**\n     * \u65ad\u5f00\u957f\u8fde\u63a5\n     * @param payload\n     * @param call\n     * @param put\n     */* dispose({payload}, {call, put,select}) {\n      const {ws} = yield select(state => state['pcOrder']);\n      if(ws){\n        yield call(ws.dispose);\n      }\n     },\n  },\n  reducers: {}\n});\nexport default pcOrderModel\n\ncomponentWillUnmount(){\n  this.props.dispatch({\n    type: 'pcOrder/dispose'\n  })\n}"]]],meta:{title:"SockJS&Stomp",publishDate:"2019-05-24T00:00:00.000Z",abstract:"SockJS&Stomp",filename:"posts/\u968f\u7b14\u5206\u7c7b/\u5e38\u89c1\u95ee\u9898\u53ca\u6280\u672f\u65b9\u6848/\u4f7f\u7528SockJS\u5b9e\u73b0webSocket\u901a\u4fe1.md"}}}});